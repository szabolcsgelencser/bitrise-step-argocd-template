// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gitops

import (
	"context"
	"sync"
)

// Ensure, that sshKeyerMock does implement sshKeyer.
// If this is not the case, regenerate this file with moq.
var _ sshKeyer = &sshKeyerMock{}

// sshKeyerMock is a mock implementation of sshKeyer.
//
//     func TestSomethingThatUsessshKeyer(t *testing.T) {
//
//         // make and configure a mocked sshKeyer
//         mockedsshKeyer := &sshKeyerMock{
//             closeFunc: func(ctx context.Context) []error {
// 	               panic("mock out the close method")
//             },
//             privateKeyPathFunc: func() string {
// 	               panic("mock out the privateKeyPath method")
//             },
//         }
//
//         // use mockedsshKeyer in code that requires sshKeyer
//         // and then make assertions.
//
//     }
type sshKeyerMock struct {
	// closeFunc mocks the close method.
	closeFunc func(ctx context.Context) []error

	// privateKeyPathFunc mocks the privateKeyPath method.
	privateKeyPathFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// close holds details about calls to the close method.
		close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// privateKeyPath holds details about calls to the privateKeyPath method.
		privateKeyPath []struct {
		}
	}
	lockclose          sync.RWMutex
	lockprivateKeyPath sync.RWMutex
}

// close calls closeFunc.
func (mock *sshKeyerMock) close(ctx context.Context) []error {
	if mock.closeFunc == nil {
		panic("sshKeyerMock.closeFunc: method is nil but sshKeyer.close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockclose.Lock()
	mock.calls.close = append(mock.calls.close, callInfo)
	mock.lockclose.Unlock()
	return mock.closeFunc(ctx)
}

// closeCalls gets all the calls that were made to close.
// Check the length with:
//     len(mockedsshKeyer.closeCalls())
func (mock *sshKeyerMock) closeCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockclose.RLock()
	calls = mock.calls.close
	mock.lockclose.RUnlock()
	return calls
}

// privateKeyPath calls privateKeyPathFunc.
func (mock *sshKeyerMock) privateKeyPath() string {
	if mock.privateKeyPathFunc == nil {
		panic("sshKeyerMock.privateKeyPathFunc: method is nil but sshKeyer.privateKeyPath was just called")
	}
	callInfo := struct {
	}{}
	mock.lockprivateKeyPath.Lock()
	mock.calls.privateKeyPath = append(mock.calls.privateKeyPath, callInfo)
	mock.lockprivateKeyPath.Unlock()
	return mock.privateKeyPathFunc()
}

// privateKeyPathCalls gets all the calls that were made to privateKeyPath.
// Check the length with:
//     len(mockedsshKeyer.privateKeyPathCalls())
func (mock *sshKeyerMock) privateKeyPathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockprivateKeyPath.RLock()
	calls = mock.calls.privateKeyPath
	mock.lockprivateKeyPath.RUnlock()
	return calls
}
